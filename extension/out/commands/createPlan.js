"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPlan = void 0;
const vscode = require("vscode");
const fs = require("fs");
const path = require("path");
async function createPlan(rootPath, treeDataProvider) {
    try {
        // Get plan name from user
        const planName = await vscode.window.showInputBox({
            prompt: 'Enter plan name (e.g., "User Authentication System")',
            placeHolder: 'Plan name...',
            validateInput: (value) => {
                if (!value || value.trim().length === 0) {
                    return 'Plan name is required';
                }
                if (value.length > 50) {
                    return 'Plan name too long (max 50 characters)';
                }
                return null;
            }
        });
        if (!planName) {
            return; // User cancelled
        }
        // Create timestamp and filename
        const timestamp = new Date().toISOString().replace(/[-:]/g, '').replace('T', '_').split('.')[0];
        const fileName = `${timestamp}_${planName.toUpperCase().replace(/\s+/g, '_')}.md`;
        // Ensure plans directory exists
        const plansDir = path.join(rootPath, '.claude', 'plans', '1_pre_exec_plans');
        if (!fs.existsSync(plansDir)) {
            fs.mkdirSync(plansDir, { recursive: true });
        }
        const filePath = path.join(plansDir, fileName);
        // Create plan template
        const planTemplate = `# Phase 1: Pre-Execution Plan - ${planName}

**Created:** ${new Date().toLocaleString()}  
**Plan ID:** ${timestamp}

## Objective
<!-- Clearly state what needs to be accomplished -->


## Detailed Steps
<!-- Break down the implementation into specific, actionable steps -->

1. 
2. 
3. 

## Success Criteria
<!-- Define how you'll know the task is complete -->

- [ ] 
- [ ] 
- [ ] 

## Technical Considerations
<!-- List any technical requirements, dependencies, or constraints -->


## Risk Assessment
<!-- Identify potential challenges and mitigation strategies -->

**Risks:**
- 

**Mitigations:**
- 

## Estimated Timeline
<!-- Rough time estimate for completion -->


---
*Generated by Claude Cascade VS Code Extension*
`;
        // Write the plan file
        fs.writeFileSync(filePath, planTemplate, 'utf8');
        // Open the new plan file
        const document = await vscode.workspace.openTextDocument(filePath);
        await vscode.window.showTextDocument(document);
        // Refresh the tree view
        treeDataProvider.refresh();
        // Show success message
        vscode.window.showInformationMessage(`âœ… Phase 1 plan created: ${planName}`, 'Show Plans').then(selection => {
            if (selection === 'Show Plans') {
                vscode.commands.executeCommand('claudeCascadePlans.focus');
            }
        });
    }
    catch (error) {
        vscode.window.showErrorMessage(`Failed to create plan: ${error}`);
    }
}
exports.createPlan = createPlan;
//# sourceMappingURL=createPlan.js.map