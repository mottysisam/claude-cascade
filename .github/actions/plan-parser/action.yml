name: 'Claude Cascade Plan Parser'
description: 'Extracts metadata and content from Claude Cascade plans'
inputs:
  plan_file:
    description: 'The path to the plan file to parse'
    required: true
outputs:
  title:
    description: 'The title of the plan'
    value: ${{ steps.parse.outputs.title }}
  plan_date:
    description: 'The date of the plan (YYYYMMDD)'
    value: ${{ steps.parse.outputs.plan_date }}
  plan_time:
    description: 'The time of the plan (HHMMSS)'
    value: ${{ steps.parse.outputs.plan_time }}
  plan_name:
    description: 'The name part of the plan'
    value: ${{ steps.parse.outputs.plan_name }}
  objective:
    description: 'The objective section of the plan'
    value: ${{ steps.parse.outputs.objective }}
  context:
    description: 'The context section of the plan (if present)'
    value: ${{ steps.parse.outputs.context }}
  detailed_steps:
    description: 'The detailed steps section of the plan'
    value: ${{ steps.parse.outputs.detailed_steps }}
  success_criteria:
    description: 'The success criteria section of the plan'
    value: ${{ steps.parse.outputs.success_criteria }}
  has_metrics:
    description: 'Whether the plan has measurable metrics'
    value: ${{ steps.parse.outputs.has_metrics }}
  implementation_requirements:
    description: 'The implementation requirements section (if present)'
    value: ${{ steps.parse.outputs.implementation_requirements }}
  dependencies:
    description: 'The dependencies section (if present)'
    value: ${{ steps.parse.outputs.dependencies }}
  timeline:
    description: 'The timeline section (if present)'
    value: ${{ steps.parse.outputs.timeline }}
  testing_approach:
    description: 'The testing approach section (if present)'
    value: ${{ steps.parse.outputs.testing_approach }}

runs:
  using: "composite"
  steps:
    - name: Parse plan file
      id: parse
      shell: bash
      run: |
        PLAN_FILE="${{ inputs.plan_file }}"
        
        if [[ ! -f "$PLAN_FILE" ]]; then
          echo "Error: Plan file not found at path: $PLAN_FILE"
          exit 1
        fi
        
        # Extract plan name from filename
        FILENAME=$(basename "$PLAN_FILE")
        if [[ "$FILENAME" =~ ^([0-9]{8})_([0-9]{6})_(.*)\.md$ ]]; then
          PLAN_DATE="${BASH_REMATCH[1]}"
          PLAN_TIME="${BASH_REMATCH[2]}"
          PLAN_NAME="${BASH_REMATCH[3]}"
          
          echo "plan_date=$PLAN_DATE" >> $GITHUB_OUTPUT
          echo "plan_time=$PLAN_TIME" >> $GITHUB_OUTPUT
          echo "plan_name=$PLAN_NAME" >> $GITHUB_OUTPUT
        else
          echo "Warning: Plan filename does not follow the convention: YYYYMMDD_HHMMSS_NAME.md"
        fi
        
        # Extract plan title (first heading)
        TITLE=$(head -n 1 "$PLAN_FILE" | sed 's/^# *//')
        # Escape any special characters
        TITLE="${TITLE//'%'/'%25'}"
        TITLE="${TITLE//$'\n'/'%0A'}"
        TITLE="${TITLE//$'\r'/'%0D'}"
        echo "title=$TITLE" >> $GITHUB_OUTPUT
        
        # Function to extract a section from the file
        extract_section() {
          local section="$1"
          local file="$2"
          local content
          
          if grep -q "^## $section" "$file"; then
            content=$(sed -n "/^## $section/,/^##/p" "$file" | tail -n +2 | head -n -1)
            
            # Escape special characters
            content="${content//'%'/'%25'}"
            content="${content//$'\n'/'%0A'}"
            content="${content//$'\r'/'%0D'}"
            
            echo "$content"
          else
            echo ""
          fi
        }
        
        # Extract common sections
        OBJECTIVE=$(extract_section "Objective" "$PLAN_FILE")
        echo "objective=$OBJECTIVE" >> $GITHUB_OUTPUT
        
        CONTEXT=$(extract_section "Context" "$PLAN_FILE")
        echo "context=$CONTEXT" >> $GITHUB_OUTPUT
        
        DETAILED_STEPS=$(extract_section "Detailed Steps" "$PLAN_FILE")
        echo "detailed_steps=$DETAILED_STEPS" >> $GITHUB_OUTPUT
        
        SUCCESS_CRITERIA=$(extract_section "Success Criteria" "$PLAN_FILE")
        echo "success_criteria=$SUCCESS_CRITERIA" >> $GITHUB_OUTPUT
        
        # Check for metrics in success criteria
        if echo "$SUCCESS_CRITERIA" | grep -q -E "[0-9]+%|[0-9]+ (seconds|minutes|hours|ms)"; then
          echo "has_metrics=true" >> $GITHUB_OUTPUT
        else
          echo "has_metrics=false" >> $GITHUB_OUTPUT
        fi
        
        # Extract optional sections
        IMPLEMENTATION_REQUIREMENTS=$(extract_section "Implementation Requirements" "$PLAN_FILE")
        echo "implementation_requirements=$IMPLEMENTATION_REQUIREMENTS" >> $GITHUB_OUTPUT
        
        DEPENDENCIES=$(extract_section "Dependencies" "$PLAN_FILE")
        echo "dependencies=$DEPENDENCIES" >> $GITHUB_OUTPUT
        
        TIMELINE=$(extract_section "Timeline" "$PLAN_FILE")
        echo "timeline=$TIMELINE" >> $GITHUB_OUTPUT
        
        TESTING_APPROACH=$(extract_section "Testing Approach" "$PLAN_FILE")
        echo "testing_approach=$TESTING_APPROACH" >> $GITHUB_OUTPUT