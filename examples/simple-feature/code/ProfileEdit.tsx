// Generated by Claude on 2025-08-16 for: User Profile Editing Example
import React, { useState, useCallback, useEffect } from 'react';
import { useForm, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import styled from 'styled-components';
import { useProfileUpdate } from '../hooks/useProfileUpdate';
import { useDebounce } from '../hooks/useDebounce';
import { AvatarUpload } from './AvatarUpload';
import { RichTextEditor } from './RichTextEditor';
import { LoadingSpinner } from '../common/LoadingSpinner';
import { ErrorBoundary } from '../common/ErrorBoundary';

// Validation schema using Zod
const profileSchema = z.object({
  name: z
    .string()
    .min(2, 'Name must be at least 2 characters')
    .max(50, 'Name must not exceed 50 characters')
    .regex(/^[a-zA-Z\s'-]+$/, 'Name can only contain letters, spaces, hyphens, and apostrophes'),
  
  bio: z
    .string()
    .max(280, 'Bio must not exceed 280 characters')
    .optional(),
  
  avatar: z
    .instanceof(File)
    .refine((file) => file.size <= 5 * 1024 * 1024, 'Avatar must be less than 5MB')
    .refine(
      (file) => ['image/jpeg', 'image/png', 'image/webp'].includes(file.type),
      'Avatar must be a JPEG, PNG, or WebP image'
    )
    .optional(),
});

type ProfileFormData = z.infer<typeof profileSchema>;

interface ProfileEditProps {
  initialData?: {
    name: string;
    bio?: string;
    avatarUrl?: string;
  };
  onSave?: (data: ProfileFormData) => void;
  onCancel?: () => void;
}

const Container = styled.div`
  max-width: 600px;
  margin: 0 auto;
  padding: 1.5rem;
  
  @media (max-width: 768px) {
    padding: 1rem;
    max-width: 100%;
  }
`;

const Form = styled.form`
  display: grid;
  gap: 1.5rem;
  
  @media (max-width: 480px) {
    gap: 1rem;
  }
`;

const FieldGroup = styled.div`
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
`;

const Label = styled.label`
  font-weight: 600;
  color: var(--text-primary);
  font-size: 0.875rem;
  
  &[aria-required="true"]::after {
    content: " *";
    color: var(--error-color);
  }
`;

const Input = styled.input`
  padding: 0.75rem;
  border: 2px solid var(--border-color);
  border-radius: 0.5rem;
  font-size: 1rem;
  font-family: inherit;
  transition: border-color 0.2s ease;
  
  &:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px var(--primary-color-alpha);
  }
  
  &[aria-invalid="true"] {
    border-color: var(--error-color);
  }
  
  &:disabled {
    background-color: var(--disabled-bg);
    cursor: not-allowed;
  }
`;

const ErrorMessage = styled.span`
  color: var(--error-color);
  font-size: 0.875rem;
  display: flex;
  align-items: center;
  gap: 0.25rem;
  
  &::before {
    content: "⚠️";
    font-size: 0.75rem;
  }
`;

const CharacterCount = styled.span<{ isNearLimit: boolean; isOverLimit: boolean }>`
  font-size: 0.75rem;
  text-align: right;
  color: ${props => 
    props.isOverLimit 
      ? 'var(--error-color)' 
      : props.isNearLimit 
        ? 'var(--warning-color)' 
        : 'var(--text-secondary)'
  };
`;

const AutoSaveIndicator = styled.div<{ isVisible: boolean }>`
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.875rem;
  color: var(--success-color);
  opacity: ${props => props.isVisible ? 1 : 0};
  transition: opacity 0.3s ease;
  
  &::before {
    content: "✓";
    font-weight: bold;
  }
`;

const ConflictResolution = styled.div`
  background: var(--warning-bg);
  border: 1px solid var(--warning-color);
  border-radius: 0.5rem;
  padding: 1rem;
  margin-bottom: 1rem;
`;

const ConflictActions = styled.div`
  display: flex;
  gap: 0.5rem;
  margin-top: 0.75rem;
  
  @media (max-width: 480px) {
    flex-direction: column;
  }
`;

const Button = styled.button<{ variant?: 'primary' | 'secondary' | 'danger' }>`
  padding: 0.5rem 1rem;
  border: none;
  border-radius: 0.375rem;
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  min-height: 44px; // Touch target size
  
  ${props => {
    switch (props.variant) {
      case 'primary':
        return `
          background: var(--primary-color);
          color: white;
          &:hover:not(:disabled) { background: var(--primary-color-dark); }
        `;
      case 'danger':
        return `
          background: var(--error-color);
          color: white;
          &:hover:not(:disabled) { background: var(--error-color-dark); }
        `;
      default:
        return `
          background: var(--secondary-bg);
          color: var(--text-primary);
          border: 1px solid var(--border-color);
          &:hover:not(:disabled) { background: var(--hover-bg); }
        `;
    }
  }}
  
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
  
  &:focus {
    outline: 2px solid var(--primary-color);
    outline-offset: 2px;
  }
`;

export const ProfileEdit: React.FC<ProfileEditProps> = React.memo(({
  initialData,
  onSave,
  onCancel
}) => {
  const [lastSaved, setLastSaved] = useState<Date | null>(null);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [conflictData, setConflictData] = useState<any>(null);

  const {
    control,
    handleSubmit,
    watch,
    setValue,
    formState: { errors, isValid }
  } = useForm<ProfileFormData>({
    resolver: zodResolver(profileSchema),
    defaultValues: {
      name: initialData?.name || '',
      bio: initialData?.bio || '',
    },
    mode: 'onBlur' // Progressive validation
  });

  const formValues = watch();
  const debouncedValues = useDebounce(formValues, 2000);

  const {
    updateProfile,
    isLoading,
    error,
    clearError
  } = useProfileUpdate({
    onSuccess: (data) => {
      setLastSaved(new Date());
      setHasUnsavedChanges(false);
      if (data.conflict) {
        setConflictData(data.conflict);
      }
      onSave?.(formValues);
    },
    onError: (error) => {
      console.error('Profile update failed:', error);
    }
  });

  // Auto-save effect
  useEffect(() => {
    if (debouncedValues && hasUnsavedChanges && isValid) {
      updateProfile(debouncedValues);
    }
  }, [debouncedValues, hasUnsavedChanges, isValid, updateProfile]);

  // Track unsaved changes
  useEffect(() => {
    const hasChanges = JSON.stringify(formValues) !== JSON.stringify({
      name: initialData?.name || '',
      bio: initialData?.bio || '',
    });
    setHasUnsavedChanges(hasChanges);
  }, [formValues, initialData]);

  const handleConflictResolve = useCallback((resolution: 'keep' | 'overwrite') => {
    if (resolution === 'overwrite') {
      updateProfile({ ...formValues, forceUpdate: true });
    } else {
      // Reload server data
      window.location.reload();
    }
    setConflictData(null);
  }, [formValues, updateProfile]);

  const bioLength = formValues.bio?.length || 0;
  const isNearBioLimit = bioLength > 250;
  const isOverBioLimit = bioLength > 280;

  return (
    <ErrorBoundary fallback={<div>Something went wrong with the profile editor.</div>}>
      <Container>
        {conflictData && (
          <ConflictResolution role="alert">
            <h3>Conflict Detected</h3>
            <p>
              Your profile has been updated by another session. Would you like to keep 
              your changes or use the latest version?
            </p>
            <ConflictActions>
              <Button 
                variant="primary" 
                onClick={() => handleConflictResolve('overwrite')}
              >
                Keep My Changes
              </Button>
              <Button 
                variant="secondary" 
                onClick={() => handleConflictResolve('keep')}
              >
                Use Latest Version
              </Button>
            </ConflictActions>
          </ConflictResolution>
        )}

        <Form onSubmit={handleSubmit(onSave || (() => {}))}>
          <FieldGroup>
            <Label htmlFor="avatar">Profile Picture</Label>
            <Controller
              name="avatar"
              control={control}
              render={({ field }) => (
                <AvatarUpload
                  currentAvatarUrl={initialData?.avatarUrl}
                  onFileSelect={field.onChange}
                  error={errors.avatar?.message}
                  disabled={isLoading}
                />
              )}
            />
          </FieldGroup>

          <FieldGroup>
            <Label htmlFor="name" aria-required="true">
              Display Name
            </Label>
            <Controller
              name="name"
              control={control}
              render={({ field }) => (
                <Input
                  {...field}
                  id="name"
                  type="text"
                  aria-invalid={!!errors.name}
                  aria-describedby={errors.name ? 'name-error' : undefined}
                  disabled={isLoading}
                  autoComplete="name"
                />
              )}
            />
            {errors.name && (
              <ErrorMessage id="name-error" role="alert">
                {errors.name.message}
              </ErrorMessage>
            )}
          </FieldGroup>

          <FieldGroup>
            <Label htmlFor="bio">Bio</Label>
            <Controller
              name="bio"
              control={control}
              render={({ field }) => (
                <RichTextEditor
                  {...field}
                  id="bio"
                  placeholder="Tell us about yourself..."
                  maxLength={280}
                  aria-invalid={!!errors.bio}
                  aria-describedby={errors.bio ? 'bio-error' : 'bio-count'}
                  disabled={isLoading}
                />
              )}
            />
            <CharacterCount
              id="bio-count"
              isNearLimit={isNearBioLimit}
              isOverLimit={isOverBioLimit}
              aria-live="polite"
            >
              {bioLength}/280 characters
            </CharacterCount>
            {errors.bio && (
              <ErrorMessage id="bio-error" role="alert">
                {errors.bio.message}
              </ErrorMessage>
            )}
          </FieldGroup>

          <AutoSaveIndicator isVisible={!!lastSaved && !hasUnsavedChanges}>
            Saved {lastSaved?.toLocaleTimeString()}
          </AutoSaveIndicator>

          {error && (
            <ErrorMessage role="alert">
              {error.message || 'An error occurred while saving your profile'}
              <Button 
                type="button" 
                variant="secondary" 
                onClick={clearError}
                style={{ marginLeft: '0.5rem', padding: '0.25rem 0.5rem' }}
              >
                Dismiss
              </Button>
            </ErrorMessage>
          )}

          {isLoading && (
            <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
              <LoadingSpinner size="small" />
              <span>Saving changes...</span>
            </div>
          )}
        </Form>
      </Container>
    </ErrorBoundary>
  );
});

ProfileEdit.displayName = 'ProfileEdit';

export default ProfileEdit;